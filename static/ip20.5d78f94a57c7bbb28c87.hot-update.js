webpackHotUpdate("ip20",{

/***/ "./node_modules/lodash.throttle/index.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash.throttle/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ /** Used as the `TypeError` message for \"Functions\" methods. */var FUNC_ERROR_TEXT='Expected a function';/** Used as references for various `Number` constants. */var NAN=0/0;/** `Object#toString` result references. */var symbolTag='[object Symbol]';/** Used to match leading and trailing whitespace. */var reTrim=/^\\s+|\\s+$/g;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Built-in method references without a dependency on `root`. */var freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Used for built-in method references. */var objectProto=Object.prototype;/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */var objectToString=objectProto.toString;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeMax=Math.max,nativeMin=Math.min;/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */var now=function now(){return root.Date.now();};/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.\nlastInvokeTime=time;// Start the timer for the trailing edge.\ntimerId=setTimeout(timerExpired,wait);// Invoke the leading edge.\nreturn leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,result=wait-timeSinceLastCall;return maxing?nativeMin(result,maxWait-timeSinceLastInvoke):result;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the\n// trailing edge, the system time has gone backwards and we're treating\n// it as the trailing edge, or we've hit the `maxWait` limit.\nreturn lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.\ntimerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;// Only invoke if we have `lastArgs` which means `func` has been\n// debounced at least once.\nif(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.\ntimerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */function isObject(value){var type=typeof value;return!!value&&(type=='object'||type=='function');}/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */function isObjectLike(value){return!!value&&typeof value=='object';}/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */function isSymbol(value){return typeof value=='symbol'||isObjectLike(value)&&objectToString.call(value)==symbolTag;}/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=value.replace(reTrim,'');var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}module.exports=throttle;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.throttle/index.js\n");

/***/ }),

/***/ "./node_modules/react-animate-on-scroll/dist/scrollAnimation.min.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-animate-on-scroll/dist/scrollAnimation.min.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports,\"__esModule\",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(_x,_x2,_x3){var _again=true;_function:while(_again){var object=_x,property=_x2,receiver=_x3;_again=false;if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{_x=parent;_x2=property;_x3=receiver;_again=true;desc=parent=undefined;continue _function;}}else if(\"value\"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var _react=__webpack_require__(/*! react */ \"./node_modules/react/index.js\");var _react2=_interopRequireDefault(_react);var _lodashThrottle=__webpack_require__(/*! lodash.throttle */ \"./node_modules/lodash.throttle/index.js\");var _lodashThrottle2=_interopRequireDefault(_lodashThrottle);var _propTypes=__webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");var _propTypes2=_interopRequireDefault(_propTypes);var ScrollAnimation=function(_Component){_inherits(ScrollAnimation,_Component);function ScrollAnimation(props){_classCallCheck(this,ScrollAnimation);_get(Object.getPrototypeOf(ScrollAnimation.prototype),\"constructor\",this).call(this,props);this.serverSide=typeof window===\"undefined\";this.listener=(0,_lodashThrottle2[\"default\"])(this.handleScroll.bind(this),50);this.visibility={onScreen:false,inViewport:false};this.state={classes:\"animated\",style:{animationDuration:this.props.duration+\"s\",opacity:this.props.initiallyVisible?1:0}};}_createClass(ScrollAnimation,[{key:\"getElementTop\",value:function getElementTop(elm){var yPos=0;while(elm&&elm.offsetTop!==undefined&&elm.clientTop!==undefined){yPos+=elm.offsetTop+elm.clientTop;elm=elm.offsetParent;}return yPos;}},{key:\"getScrollPos\",value:function getScrollPos(){if(this.scrollableParent.pageYOffset!==undefined){return this.scrollableParent.pageYOffset;}return this.scrollableParent.scrollTop;}},{key:\"getScrollableParentHeight\",value:function getScrollableParentHeight(){if(this.scrollableParent.innerHeight!==undefined){return this.scrollableParent.innerHeight;}return this.scrollableParent.clientHeight;}},{key:\"getViewportTop\",value:function getViewportTop(){return this.getScrollPos()+this.props.offset;}},{key:\"getViewportBottom\",value:function getViewportBottom(){return this.getScrollPos()+this.getScrollableParentHeight()-this.props.offset;}},{key:\"isInViewport\",value:function isInViewport(y){return y>=this.getViewportTop()&&y<=this.getViewportBottom();}},{key:\"isAboveViewport\",value:function isAboveViewport(y){return y<this.getViewportTop();}},{key:\"isBelowViewport\",value:function isBelowViewport(y){return y>this.getViewportBottom();}},{key:\"inViewport\",value:function inViewport(elementTop,elementBottom){return this.isInViewport(elementTop)||this.isInViewport(elementBottom)||this.isAboveViewport(elementTop)&&this.isBelowViewport(elementBottom);}},{key:\"onScreen\",value:function onScreen(elementTop,elementBottom){return!this.isAboveScreen(elementBottom)&&!this.isBelowScreen(elementTop);}},{key:\"isAboveScreen\",value:function isAboveScreen(y){return y<this.getScrollPos();}},{key:\"isBelowScreen\",value:function isBelowScreen(y){return y>this.getScrollPos()+this.getScrollableParentHeight();}},{key:\"getVisibility\",value:function getVisibility(){var elementTop=this.getElementTop(this.node)-this.getElementTop(this.scrollableParent);var elementBottom=elementTop+this.node.clientHeight;return{inViewport:this.inViewport(elementTop,elementBottom),onScreen:this.onScreen(elementTop,elementBottom)};}},{key:\"componentDidMount\",value:function componentDidMount(){if(!this.serverSide){var parentSelector=this.props.scrollableParentSelector;this.scrollableParent=parentSelector?document.querySelector(parentSelector):window;if(this.scrollableParent&&this.scrollableParent.addEventListener){this.scrollableParent.addEventListener(\"scroll\",this.listener);}else{console.warn(\"Cannot find element by locator: \"+this.props.scrollableParentSelector);}if(this.props.animatePreScroll){this.handleScroll();}}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearTimeout(this.delayedAnimationTimeout);clearTimeout(this.callbackTimeout);if(window&&window.removeEventListener){window.removeEventListener(\"scroll\",this.listener);}}},{key:\"visibilityHasChanged\",value:function visibilityHasChanged(previousVis,currentVis){return previousVis.inViewport!==currentVis.inViewport||previousVis.onScreen!==currentVis.onScreen;}},{key:\"animate\",value:function animate(animation,callback){var _this=this;this.delayedAnimationTimeout=setTimeout(function(){_this.animating=true;_this.setState({classes:\"animated \"+animation,style:{animationDuration:_this.props.duration+\"s\"}});_this.callbackTimeout=setTimeout(callback,_this.props.duration*1000);},this.props.delay);}},{key:\"animateIn\",value:function animateIn(callback){var _this2=this;this.animate(this.props.animateIn,function(){if(!_this2.props.animateOnce){_this2.setState({style:{animationDuration:_this2.props.duration+\"s\",opacity:1}});_this2.animating=false;}var vis=_this2.getVisibility();if(callback){callback(vis);}});}},{key:\"animateOut\",value:function animateOut(callback){var _this3=this;this.animate(this.props.animateOut,function(){_this3.setState({classes:\"animated\",style:{animationDuration:_this3.props.duration+\"s\",opacity:0}});var vis=_this3.getVisibility();if(vis.inViewport&&_this3.props.animateIn){_this3.animateIn(_this3.props.afterAnimatedIn);}else{_this3.animating=false;}if(callback){callback(vis);}});}},{key:\"handleScroll\",value:function handleScroll(){if(!this.animating){var currentVis=this.getVisibility();if(this.visibilityHasChanged(this.visibility,currentVis)){clearTimeout(this.delayedAnimationTimeout);if(!currentVis.onScreen){this.setState({classes:\"animated\",style:{animationDuration:this.props.duration+\"s\",opacity:this.props.initiallyVisible?1:0}});}else if(currentVis.inViewport&&this.props.animateIn){this.animateIn(this.props.afterAnimatedIn);}else if(currentVis.onScreen&&this.visibility.inViewport&&this.props.animateOut&&this.state.style.opacity===1){this.animateOut(this.props.afterAnimatedOut);}this.visibility=currentVis;}}}},{key:\"render\",value:function render(){var _this4=this;var classes=this.props.className?this.props.className+\" \"+this.state.classes:this.state.classes;return _react2[\"default\"].createElement(\"div\",{ref:function ref(node){_this4.node=node;},className:classes,style:Object.assign({},this.state.style,this.props.style)},this.props.children);}}]);return ScrollAnimation;}(_react.Component);exports[\"default\"]=ScrollAnimation;ScrollAnimation.defaultProps={offset:150,duration:1,initiallyVisible:false,delay:0,animateOnce:false,animatePreScroll:true};ScrollAnimation.propTypes={animateIn:_propTypes2[\"default\"].string,animateOut:_propTypes2[\"default\"].string,offset:_propTypes2[\"default\"].number,duration:_propTypes2[\"default\"].number,delay:_propTypes2[\"default\"].number,initiallyVisible:_propTypes2[\"default\"].bool,animateOnce:_propTypes2[\"default\"].bool,style:_propTypes2[\"default\"].object,scrollableParentSelector:_propTypes2[\"default\"].string,className:_propTypes2[\"default\"].string,animatePreScroll:_propTypes2[\"default\"].bool};module.exports=exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-animate-on-scroll/dist/scrollAnimation.min.js\n");

/***/ }),

/***/ "./packages/twentytwenty-theme/src/components/EventInformation.js":
/*!************************************************************************!*\
  !*** ./packages/twentytwenty-theme/src/components/EventInformation.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _img_lines_png__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../img/lines.png */ \"./packages/twentytwenty-theme/src/img/lines.png\");\n/* harmony import */ var _img_lines_png__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_img_lines_png__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_animate_on_scroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-animate-on-scroll */ \"./node_modules/react-animate-on-scroll/dist/scrollAnimation.min.js\");\n/* harmony import */ var react_animate_on_scroll__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_animate_on_scroll__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nvar EventInformation=()=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{id:\"event-info-section\",className:\"event_info_section\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"video-container\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"video\",{muted:true,autoPlay:true,loop:true},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"source\",{src:\"/static/videos/bg-video.mp4\",type:\"video/mp4\"})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"text_on_video\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{style:{margin:\"0 14px\"}},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{className:\"event_title\"},\"Welcome to the\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",{className:\"event_desc\"},\"Global IP Challenges Forum (IP20+)\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"start_date_section\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:_img_lines_png__WEBPACK_IMPORTED_MODULE_1___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"start_date\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"26\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"October\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h5\",null,\"2020\"))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react_animate_on_scroll__WEBPACK_IMPORTED_MODULE_2___default.a,{animateIn:\"fadeIn\"},\"Some Text\")));};/* harmony default export */ __webpack_exports__[\"default\"] = (EventInformation);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvRXZlbnRJbmZvcm1hdGlvbi5qcz80ZmQxIl0sIm5hbWVzIjpbIkV2ZW50SW5mb3JtYXRpb24iLCJtYXJnaW4iLCJsaW5lc0ltZyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUlBLEdBQU1BLGlCQUFnQixDQUFHLElBQU0sQ0FDN0IsTUFDRSxrRUFBSyxFQUFFLENBQUMsb0JBQVIsQ0FBNkIsU0FBUyxDQUFDLG9CQUF2QyxFQUNFLGlFQUFLLFNBQVMsQ0FBQyxpQkFBZixFQUNFLG1FQUFPLEtBQUssS0FBWixDQUFhLFFBQVEsS0FBckIsQ0FBc0IsSUFBSSxLQUExQixFQUNFLG9FQUFRLEdBQUcsQ0FBQyw2QkFBWixDQUEwQyxJQUFJLENBQUMsV0FBL0MsRUFERixDQURGLENBSUUsaUVBQUssU0FBUyxDQUFDLGVBQWYsRUFDRSxpRUFBSyxLQUFLLENBQUUsQ0FBRUMsTUFBTSxDQUFFLFFBQVYsQ0FBWixFQUNFLCtEQUFHLFNBQVMsQ0FBQyxhQUFiLG1CQURGLENBRUUsZ0VBQUksU0FBUyxDQUFDLFlBQWQsdUNBRkYsQ0FHRSxpRUFBSyxTQUFTLENBQUMsb0JBQWYsRUFDRSxxRUFDRSxpRUFBSyxHQUFHLENBQUVDLHFEQUFWLEVBREYsQ0FERixDQUlFLGlFQUFLLFNBQVMsQ0FBQyxZQUFmLEVBQ0UseUVBREYsQ0FFRSw2RUFGRixDQUdFLDJFQUhGLENBSkYsQ0FIRixDQURGLENBSkYsQ0FvQkUsMERBQUMsOERBQUQsRUFBaUIsU0FBUyxDQUFDLFFBQTNCLGNBcEJGLENBREYsQ0FERixDQTBCRCxDQTNCRCxDQTZCZUYsK0VBQWYiLCJmaWxlIjoiLi9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvRXZlbnRJbmZvcm1hdGlvbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IGxpbmVzSW1nIGZyb20gXCIuLi9pbWcvbGluZXMucG5nXCI7XHJcbmltcG9ydCBTY3JvbGxBbmltYXRpb24gZnJvbSBcInJlYWN0LWFuaW1hdGUtb24tc2Nyb2xsXCI7XHJcblxyXG5jb25zdCBFdmVudEluZm9ybWF0aW9uID0gKCkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGlkPVwiZXZlbnQtaW5mby1zZWN0aW9uXCIgY2xhc3NOYW1lPVwiZXZlbnRfaW5mb19zZWN0aW9uXCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlkZW8tY29udGFpbmVyXCI+XHJcbiAgICAgICAgPHZpZGVvIG11dGVkIGF1dG9QbGF5IGxvb3A+XHJcbiAgICAgICAgICA8c291cmNlIHNyYz1cIi9zdGF0aWMvdmlkZW9zL2JnLXZpZGVvLm1wNFwiIHR5cGU9XCJ2aWRlby9tcDRcIiAvPlxyXG4gICAgICAgIDwvdmlkZW8+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0X29uX3ZpZGVvXCI+XHJcbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpbjogXCIwIDE0cHhcIiB9fT5cclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXZlbnRfdGl0bGVcIj5XZWxjb21lIHRvIHRoZTwvcD5cclxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImV2ZW50X2Rlc2NcIj5HbG9iYWwgSVAgQ2hhbGxlbmdlcyBGb3J1bSAoSVAyMCspPC9oMT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdGFydF9kYXRlX3NlY3Rpb25cIj5cclxuICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9e2xpbmVzSW1nfSAvPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3RhcnRfZGF0ZVwiPlxyXG4gICAgICAgICAgICAgICAgPGgxPjI2PC9oMT5cclxuICAgICAgICAgICAgICAgIDxwPk9jdG9iZXI8L3A+XHJcbiAgICAgICAgICAgICAgICA8aDU+MjAyMDwvaDU+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPFNjcm9sbEFuaW1hdGlvbiBhbmltYXRlSW49XCJmYWRlSW5cIj5Tb21lIFRleHQ8L1Njcm9sbEFuaW1hdGlvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXZlbnRJbmZvcm1hdGlvbjtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/twentytwenty-theme/src/components/EventInformation.js\n");

/***/ })

})